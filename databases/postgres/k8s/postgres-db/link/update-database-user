#!/bin/bash

set -e
export WORKING_DIRECTORY_ORIGINAL="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $WORKING_DIRECTORY_ORIGINAL
../ensure_psql.sh

# Get service connection details
SERVICE_HOSTNAME=$ACTION_SERVICE_ATTRIBUTES_HOSTNAME
SERVICE_PORT=$ACTION_SERVICE_ATTRIBUTES_PORT
SERVICE_DBNAME=$ACTION_SERVICE_ATTRIBUTES_DBNAME
SECRET_NAME=$ACTION_SERVICE_ATTRIBUTES_K_8_S_SECRET_NAME

if [[ $DB_USERNAME == "" ]]; then
  DB_USERNAME=$ACTION_LINK_ATTRIBUTES_USERNAME
fi


# Get admin credentials from K8s secret
ADMIN_PASSWORD=$(kubectl get secret $SECRET_NAME -n postgres-db -o json | jq -r '.data["postgres-password"]' | base64 -d)

# Prepare user update query
USER_UPDATE_QUERY="

-- Revoke all existing privileges
REVOKE ALL PRIVILEGES ON DATABASE "$SERVICE_DBNAME" FROM "$DB_USERNAME";
REVOKE ALL PRIVILEGES ON SCHEMA public FROM "$DB_USERNAME";
REVOKE ALL PRIVILEGES ON ALL TABLES IN SCHEMA public FROM "$DB_USERNAME";
REVOKE ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public FROM "$DB_USERNAME";
ALTER USER "$DB_USERNAME" WITH NOSUPERUSER;
"

if [[ "$ACTION_PARAMETERS_PERMISIONS_READ" == "true" ]]; then
  USER_UPDATE_QUERY+="
GRANT CONNECT ON DATABASE \"$SERVICE_DBNAME\" TO \"$DB_USERNAME\";
GRANT USAGE ON SCHEMA public TO \"$DB_USERNAME\";
GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"$DB_USERNAME\";
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO \"$DB_USERNAME\";
"
fi
if [[ "$ACTION_PARAMETERS_PERMISIONS_WRITE" == "true" ]]; then
  USER_UPDATE_QUERY+="
GRANT CONNECT ON DATABASE \"$SERVICE_DBNAME\" TO \"$DB_USERNAME\";
GRANT USAGE, CREATE ON SCHEMA public TO \"$DB_USERNAME\";
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \"$DB_USERNAME\";
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO \"$DB_USERNAME\";
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO \"$DB_USERNAME\";
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT USAGE, SELECT ON SEQUENCES TO \"$DB_USERNAME\";
" 
fi

if [[ "$ACTION_PARAMETERS_PERMISIONS_ADMIN" == "true" ]]; then
  USER_UPDATE_QUERY+="
ALTER USER \"$DB_USERNAME\" WITH SUPERUSER;
"
fi

# Execute user update using PostgreSQL client pod
../run_query_in_pod.sh "$SERVICE_HOSTNAME" "$SERVICE_PORT" "$SERVICE_DBNAME" "postgres" "$ADMIN_PASSWORD" "$USER_UPDATE_QUERY" "ddl"

# Update link results with connection details
JSON_RESPONSE=$(echo $NP_ACTION_CONTEXT | jq ".notification.parameters + {
    permisions: {
        read: $ACTION_PARAMETERS_PERMISIONS_READ,
        write: $ACTION_PARAMETERS_PERMISIONS_WRITE,
        admin: $ACTION_PARAMETERS_PERMISIONS_ADMIN
    }
}")

np link action update --results "$JSON_RESPONSE"